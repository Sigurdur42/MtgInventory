@page "/"
@using MtgDatabase
@using MtgDatabase.Models
@using System.Collections.ObjectModel
@using System.Globalization
@inject MtgInventoryService InventoryService
@inject IMkmMapper MkmMapper

<EditForm Model="@_databaseQueryData" OnValidSubmit="@StartSearchAsync">
    <MudCard>
        <MudCardContent>
            <MudTextField @bind-Value="_databaseQueryData.Name" Label="Card Name" HelperText="Card name to look for" Variant="Variant.Text"/>
            <MudExpansionPanels >
            <MudExpansionPanel IsExpanded="@_detailsSearchOptionsVisible" Text="Search details">
            <MudAutocomplete T="SetInfo" Label="This set only"
                             @bind-Value="@_selectedSet" SearchFunc="@SearchSet"
                             ToStringFunc="@(e => e == null ? null : $"{e.Name} ({e.Code})")"/>
            <MudSwitch @bind-Checked="@_databaseQueryData.MatchExactName" Label="Match Exact"/>
            <MudSwitch @bind-Checked="@_databaseQueryData.IsToken" Label="Token Only"/>
            <MudSwitch @bind-Checked="@_databaseQueryData.IsBasicLand" Label="Basic Land Only"/>
            </MudExpansionPanel></MudExpansionPanels>
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Search Cards!</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

<MudTable Items="@_queryResult" Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="true" Height="@_tableHeight.ToString(CultureInfo.InvariantCulture)">
    <HeaderContent>
        <MudTh>Image</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Price</MudTh>
        <MudTh>Type Line</MudTh>
        <MudTh>Legalities</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Image">
            <img src="@context.Images?.Normal" width="@_imageWidth"/>
        </MudTd>
        <MudTd DataLabel="Name">
            <MudLink Href="@MkmMapper.GenerateUrl(context)" Target="_blank">Show in MKM</MudLink>
            <br/>
            @context.Name+
            <br/>
            @context.SetCode
            <br/>
            @context.SetName
            <br/>
            Collector: &nbsp;: @context.CollectorNumber
        </MudTd>
        <MudTd DataLabel="Price">
            €:&nbsp;@context.Eur
            <br/>
            € Foil:&nbsp;@context.EurFoil
            <br/>
            $:&nbsp;@context.Usd
            <br/>$ Foil:&nbsp;@context.UsdFoil
            <br/>
            Tix:&nbsp;@context.Tix
            <br/>
            Language:&nbsp;@context.Language<br/>
            Updated:&nbsp;@context.UpdateDateUtc
        </MudTd>
        <MudTd DataLabel="Type Tine">@context.TypeLine</MudTd>
        <MudTd DataLabel="Legalities">// TODO: Legalities</MudTd>
    </RowTemplate>
</MudTable>


@code
{
    int _tableHeight = 600;

    private void UpdateResultHeight()
    {
        _tableHeight = _detailsSearchOptionsVisible ? 800 : 600;
    }
    
    bool _detailsSearchOptionsVisible = true;
    private async Task<IEnumerable<SetInfo>> SearchSet(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            return _setData;
        }

        return _setData.Where(e => $"{e.Name} ({e.Code})".Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private readonly MtgDatabaseQueryData _databaseQueryData = new MtgDatabaseQueryData();

    private readonly int _imageWidth = 200;

    private readonly ObservableCollection<QueryableMagicCard> _queryResult = new ObservableCollection<QueryableMagicCard>();

    private async void StartSearchAsync()
    {
        _databaseQueryData.SetCode = _selectedSet?.Code ?? "";
        var result = await InventoryService.SearchCardsAsync(_databaseQueryData);
        _queryResult.Clear();
        foreach (var res in result)
        {
            _queryResult.Add(res);
        }

        _detailsSearchOptionsVisible = false;
        UpdateResultHeight();
        StateHasChanged();
    }

    private SetInfo[] _setData = Array.Empty<SetInfo>();
    private SetInfo _selectedSet = null;

    protected override void OnInitialized()
    {
        _setData = InventoryService.GetAllSets();
    }
}