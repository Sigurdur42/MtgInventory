@page "/"
@using MtgDatabase
@using MtgDatabase.Models
@using System.Collections.ObjectModel
@inject MtgInventoryService InventoryService
@inject IMkmMapper MkmMapper

<p>
    <EditForm Model="@_databaseQueryData" OnValidSubmit="@StartSearchAsync">
        <MudCard>
            <MudCardContent>
                <MudTextField @bind-Value="_databaseQueryData.Name" Label="Card Name" HelperText="Card name to look for" Variant="Variant.Text"/>
                <MudAutocomplete T="SetInfo" Label="This set only"
                                 @bind-Value="@_selectedSet" SearchFunc="@Search"
                                 ToStringFunc="@(e => e == null ? null : $"{e.Name} ({e.Code})")"/>
                <MudSwitch @bind-Checked="@_databaseQueryData.MatchExactName" Label="Match Exact"/>
                <MudSwitch @bind-Checked="@_databaseQueryData.IsToken" Label="Token Only"/>
                <MudSwitch @bind-Checked="@_databaseQueryData.IsBasicLand" Label="Basic Land Only"/>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Search Cards!</MudButton>
            </MudCardActions>
        </MudCard>

    </EditForm>
</p>
<hr/>
<p>
    <table class="table" id="searchResult">
        <thead>
        <tr>
            <th>Image</th>
            <th>Name</th>
            <th>Price</th>
            <th>Type Line</th>
            <th>Reprints</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var card in _queryResult)
        {
            <tr>
                <td>
                    <img src="@card.Images?.Normal" width="@_imageWidth"/>
                </td>
                <td>
                    <MudLink Href="@MkmMapper.GenerateUrl(card)" Target="_blank">Show in MKM</MudLink>

                    <br/>
                    @card.Name+
                    <br/>
                    @card.SetCode
                    <br/>
                    @card.SetName
                    <br/>
                    Collector: &nbsp;: @card.CollectorNumber
                </td>
                <td>

                    €:&nbsp;@card.Eur
                    <br/>
                    € Foil:&nbsp;@card.EurFoil
                    <br/>
                    $:&nbsp;@card.Usd
                    <br/>$ Foil:&nbsp;@card.UsdFoil
                    <br/>
                    Tix:&nbsp;@card.Tix
                    <br/>
                    Language:&nbsp;@card.Language<br/>
                    Updated:&nbsp;@card.UpdateDateUtc
                </td>
                <td>
                    @card.TypeLine<br/>@card.OracleText
                </td>
                <td>@card.ReprintInfos?.Length</td>
            </tr>
        }
        </tbody>
    </table>
</p>


@code
{
    private async Task<IEnumerable<SetInfo>> Search(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            return _setData;
        }

        return _setData.Where(e => $"{e.Name} ({e.Code})".Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private readonly MtgDatabaseQueryData _databaseQueryData = new MtgDatabaseQueryData();

    private readonly int _imageWidth = 300;

    public ObservableCollection<QueryableMagicCard> _queryResult = new ObservableCollection<QueryableMagicCard>();

    private async void StartSearchAsync()
    {
        _databaseQueryData.SetCode = _selectedSet?.Code ?? "";
        var result = await InventoryService.SearchCardsAsync(_databaseQueryData);
        _queryResult.Clear();
        foreach (var res in result)
        {
            _queryResult.Add(res);
        }

        StateHasChanged();
    }

    private SetInfo[] _setData = Array.Empty<SetInfo>();
    private SetInfo _selectedSet = null;

    protected override void OnInitialized()
    {
        _setData = InventoryService.GetAllSets();
    }
}