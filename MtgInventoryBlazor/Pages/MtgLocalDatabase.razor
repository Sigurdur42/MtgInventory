@page "/mtglocaldatabase"
@using MtgDatabase
@using MtgDatabase.Models
@using System.Globalization
@inject IDialogService Dialog
@inject MtgInventoryService InventoryService
@inject IMkmMapper MkmMapper

<p>
    <h1>Database Summary</h1>
</p>

<p>
    <MudSimpleTable>
        <tbody>
        <tr>
            <td>Last Updated:</td>
            <td>@_databaseSummary.LastUpdated.ToString("f", CultureInfo.CurrentUICulture)</td>
        </tr>
        <tr>
            <td>Set Count:</td>
            <td>@_databaseSummary.NumberOfSets</td>
        </tr>
        <tr>
            <td>Card Count:</td>
            <td>@_databaseSummary.NumberOfCards</td>
        </tr>
        </tbody>
    </MudSimpleTable>
</p>
<p>
    <div>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Custom.Radioactive" Color="Color.Warning"
                   OnClick="OnDownloadAndRebuildAll">
            Download from Scryfall and Rebuild
        </MudButton>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Custom.Radioactive" Color="Color.Warning"
                   OnClick="OnSkipDownloadAndRebuildAll">
            Skip Downlaod and Rebuild
        </MudButton>
    </div>
</p>

@code
{
    async void OnDownloadAndRebuildAll()
    {
        var result = Dialog.Show<RebuildDatabaseConfigurationDialog>("Confirm Download and Database Rebuild");
        var closeState = await result.Result;
        if (closeState.Cancelled)
        {
            return;
        }
        await InventoryService.DownloadAndRebuildAll(true);
        _databaseSummary = InventoryService.GetDatabaseSummary();
    }

    async void OnSkipDownloadAndRebuildAll()
    {
        var result = Dialog.Show<RebuildDatabaseConfigurationDialog>("Confirm Skip Download and Database Rebuild");
        var closeState = await result.Result;
        if (closeState.Cancelled)
        {
            return;
        }
        await InventoryService.DownloadAndRebuildAll(false);
        _databaseSummary = InventoryService.GetDatabaseSummary();
    }

    private DatabaseSummary _databaseSummary = new DatabaseSummary();

    protected override void OnInitialized()
    {
        _databaseSummary = InventoryService.GetDatabaseSummary();
    }
}