@page "/"

@using MtgBinder.Blazr.Data
@using MtgBinder.Blazr.Data.CardLookup
@using MtgBinder.Domain.Database
@using MatBlazor
@using ScryfallApi.Client.Models

@inject CardLookupService LookupService

<h1>Lookup stuff</h1>

<p>Lookup cards</p>
<EditForm Model="@_cardLookupData" OnValidSubmit="OnSubmitLookup">
    <DataAnnotationsValidator />
    <p>
        <label>Card:</label>
        <MatTextField id="lookup" @bind-Value="_cardLookupData.Lookup" Label="Card" />
        @*<MatSelectItem @bind-value="@_cardLookupData.Mode" Items="@AvailableModes"  Label="Retrieval mode"/>*@
    </p>
    <p><MatButton>Search!</MatButton></p>
</EditForm>

<p>This component demonstrates fetching data from a service.</p>

@if (!_lookupResult.Cards.Any())
{
    <p><em>No cards yet</em></p>
}
else
{
    <MatTable Items="@_lookupResult.Cards" AllowSelection="true" SelectionChanged="SelectionChangedEvent">
        <MatTableHeader>

            <th><span style="width:300px">Name</span></th>
            <th>Set</th>
          
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Name</td>
            <td>@context.SetCode</td>
        </MatTableRow>
    </MatTable>
}

@code {
    private readonly CardLookupData _cardLookupData = new CardLookupData();
    private LookupResult _lookupResult = new LookupResult();

    private SearchOptions.RollupMode[] AvailableModes = new[]
    {
        SearchOptions.RollupMode.Prints,
        SearchOptions.RollupMode.Cards
    };

    async void OnSubmitLookup()
    {
        _lookupResult = await LookupService.Lookup(_cardLookupData);
    }

    private void SelectionChangedEvent(object row)
    {
        var selectedRow = row as LookupCard;
        int debug = 0;
    }

        //protected override async Task OnInitializedAsync()
        //{
        //    forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        //}
}